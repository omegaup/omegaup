============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-6.2.5, py-1.11.0, pluggy-1.5.0
rootdir: /opt/omegaup
plugins: timeout-2.1.0, mock-3.14.0, shutil-1.8.1, stub-1.1.0
collected 1 item

stuff/test_mysql_logs.py F                                               [100%]

=================================== FAILURES ===================================
__________________________________ test_main ___________________________________

    def test_main() -> None:
        '''Main function to handle the logic'''
        # Use your credentials
        connection = create_connection(host_name="mysql",
                                       user_name="root",
                                       user_password="omegaup",
                                       db_name="omegaup", )
        if connection:
            queries = get_queries_from_general_log(connection)
            if queries:
>               explain_queries(connection, queries)

stuff/test_mysql_logs.py:145: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

connection = <mysql.connector.connection_cext.CMySQLConnection object at 0x7fa4de81f430>
queries = [('DELETE FROM `Groups_` WHERE `alias` NOT LIKE "%:%"',), ('DELETE FROM\n                    `Tags`\n                W...t_email_id` = NULL\n            WHERE\n                (\n                    `user_id` = 1\n                )',), ...]

    def explain_queries(
        connection: mysql.connector.MySQLConnection,
        queries: Iterable[Tuple[Any, ...]]
    ) -> None:
        '''Run explain command on queries'''
        cursor = connection.cursor()
        query_count = 0
        query_set = set()
        # max_inefficient = 0
        for query in queries:
            query_text = query[0]
            try:
                cursor.execute(f"EXPLAIN {query_text}")
                explain_result = cursor.fetchall()
    
                # Get the index of the interest columns
                column_names = [i[0] for i in cursor.description]  # type: ignore
                # possible_keys_index = column_names.index('possible_keys')
                type_row_index = column_names.index('type')
                table_row_index = column_names.index('table')
                extra_row_index = column_names.index('Extra')
                check_extra = ['no matching row in const table',
                               'Using index']
                full_table_scan = 'ALL'
                exclude = ['Languages',
                           'general_log',
                           'Roles', 'Groups_',
                           'Tags',
                           'urc']
                inefficient_count = 0
                for row in explain_result:
                    # print(row[table_row_index])
                    if str(row[extra_row_index]) in check_extra:
                        continue
                    if row[type_row_index] != full_table_scan:
                        continue
                    if (row[table_row_index] is None
                        or "<union" in row[table_row_index]
                        or "<derived" in row[table_row_index]
                        or row[table_row_index] in exclude
                        or row[table_row_index].startswith('full_')):
                        continue
                    if (query_text.startswith('DELETE ') and
                        ' WHERE ' not in query_text):
                        continue
                    inefficient_count += 1
                if inefficient_count > 0:
                    # print(query_text)
                    # print(explain_result)
                    # query_count += 1
                    # print("==================================================")
                    # print(inefficient_count, " inefficient tables scan")
                    query_set.add(normalize_query(query_text))
    
            except Error as e:
                print(f"Failed to explain query: {query_text}")
                print(f"Error: {e}")
        # print(query_count, " inefficient queries found")
        for clean_query in query_set:
            print("===========Clean query==================\n",
                  clean_query)
        print(len(query_set))
        # print(max_inefficient, " max inefficient queries")
        # if query_count > 0:
            # pytest.skip(f'{query_count} need fix')
>       assert False
E       assert False

stuff/test_mysql_logs.py:131: AssertionError
----------------------------- Captured stdout call -----------------------------
Connection to MySQL DB successful
===========Clean query==================
 SELECT
                c.alias,
                c.name,
                c.level,
                s.name as school_name,
                IFNULL(
                    (
                        SELECT
                            COUNT(*)
                        FROM
                            Groups_Identities gi
                        WHERE
                            gi.group_id = c.group_id
                    ),
                    ?
                ) AS studentCount,
                IFNULL(
                    (
                        SELECT
                            COUNT(*)
                        FROM
                            Assignments a
                        WHERE
                            a.course_id = c.course_id AND
                            a.assignment_type = ?
                    ),
                    ?
                ) AS lessonCount,
                ? AS alreadyStarted
            FROM
                Courses c
            LEFT JOIN
                Schools s ON c.school_id = s.school_id
            WHERE
                c.admission_mode = ? AND
                c.recommended = ? AND
                c.archived = ?
===========Clean query==================
 SELECT DISTINCT
                    ROUND(? / LOG2(GREATEST(p.accepted, ?) + ?), ?) AS points,
                    p.accepted / GREATEST(?, p.submissions)     AS ratio,
                    ROUND(? * IFNULL(ps.score, ?), ?)   AS score,
                    `p`.`problem_id`, `p`.`acl_id`, `p`.`visibility`, `p`.`title`, `p`.`alias`, `p`.`commit`, `p`.`current_version`, `p`.`languages`, `p`.`input_limit`, `p`.`visits`, `p`.`submissions`, `p`.`accepted`, `p`.`difficulty`, `p`.`creation_date`, `p`.`source`, `p`.`order`, `p`.`deprecated`, `p`.`email_clarifications`, `p`.`quality`, `p`.`quality_histogram`, `p`.`difficulty_histogram`, `p`.`quality_seal`, `p`.`show_diff`, `p`.`allow_user_add_tags`
             
                FROM
                    Problems p
                INNER JOIN
                    ACLs a
                ON
                    a.acl_id = p.acl_id
                LEFT JOIN (
                    SELECT
                        s.problem_id,
                        s.identity_id,
                        MAX(r.score) AS score
                    FROM
                        Submissions s
                    INNER JOIN
                        Runs r ON r.run_id = s.current_run_id
                    WHERE
                        s.identity_id = ?
                    GROUP BY
                        s.problem_id, s.identity_id
                ) ps ON ps.problem_id = p.problem_id
                LEFT JOIN
                    User_Roles ur ON ur.user_id = ? AND p.acl_id = ur.acl_id AND ur.role_id = ?
                LEFT JOIN
                    Identities id ON id.identity_id = ? AND a.owner_id = id.user_id
                LEFT JOIN (
                    SELECT DISTINCT
                        gr.acl_id
                    FROM
                        Groups_Identities gi
                    INNER JOIN
                        Group_Roles gr ON gr.group_id = gi.group_id
                    WHERE gi.identity_id = ? AND gr.role_id = ?
                ) gr ON p.acl_id = gr.acl_id 
WHERE
(p.title LIKE CONCAT(?, ?, ?) OR p.alias LIKE CONCAT(?, ?, ?)) AND (p.visibility >= ? OR id.identity_id = ? OR ur.acl_id IS NOT NULL OR gr.acl_id IS NOT NULL) AND p.visibility > -? ORDER BY `points`  asc  LIMIT ?, ?
===========Clean query==================
 SELECT
                COUNT(*)
            FROM
                Schools s
            WHERE
                s.score != ?
            ORDER BY
                s.`ranking` IS NULL, s.`ranking` ASC
===========Clean query==================
 SELECT DISTINCT
                    ROUND(? / LOG2(GREATEST(p.accepted, ?) + ?), ?) AS points,
                    p.accepted / GREATEST(?, p.submissions)     AS ratio,
                    ROUND(? * IFNULL(ps.score, ?), ?)   AS score,
                    `p`.`problem_id`, `p`.`acl_id`, `p`.`visibility`, `p`.`title`, `p`.`alias`, `p`.`commit`, `p`.`current_version`, `p`.`languages`, `p`.`input_limit`, `p`.`visits`, `p`.`submissions`, `p`.`accepted`, `p`.`difficulty`, `p`.`creation_date`, `p`.`source`, `p`.`order`, `p`.`deprecated`, `p`.`email_clarifications`, `p`.`quality`, `p`.`quality_histogram`, `p`.`difficulty_histogram`, `p`.`quality_seal`, `p`.`show_diff`, `p`.`allow_user_add_tags`
             
                FROM
                    Problems p
                INNER JOIN
                    ACLs a
                ON
                    a.acl_id = p.acl_id
                LEFT JOIN (
                    SELECT
                        s.problem_id,
                        s.identity_id,
                        MAX(r.score) AS score
                    FROM
                        Submissions s
                    INNER JOIN
                        Runs r ON r.run_id = s.current_run_id
                    WHERE
                        s.identity_id = ?
                    GROUP BY
                        s.problem_id, s.identity_id
                ) ps ON ps.problem_id = p.problem_id
                LEFT JOIN
                    User_Roles ur ON ur.user_id = ? AND p.acl_id = ur.acl_id AND ur.role_id = ?
                LEFT JOIN
                    Identities id ON id.identity_id = ? AND a.owner_id = id.user_id
                LEFT JOIN (
                    SELECT DISTINCT
                        gr.acl_id
                    FROM
                        Groups_Identities gi
                    INNER JOIN
                        Group_Roles gr ON gr.group_id = gi.group_id
                    WHERE gi.identity_id = ? AND gr.role_id = ?
                ) gr ON p.acl_id = gr.acl_id 
WHERE
(p.title LIKE CONCAT(?, ?, ?) OR p.alias LIKE CONCAT(?, ?, ?)) AND (p.visibility >= ? OR id.identity_id = ? OR ur.acl_id IS NOT NULL OR gr.acl_id IS NOT NULL) AND p.visibility > -? ORDER BY `difficulty`  desc  LIMIT ?, ?
===========Clean query==================
 SELECT DISTINCT
                    ROUND(? / LOG2(GREATEST(p.accepted, ?) + ?), ?) AS points,
                    p.accepted / GREATEST(?, p.submissions)     AS ratio,
                    ROUND(? * IFNULL(ps.score, ?), ?)   AS score,
                    `p`.`problem_id`, `p`.`acl_id`, `p`.`visibility`, `p`.`title`, `p`.`alias`, `p`.`commit`, `p`.`current_version`, `p`.`languages`, `p`.`input_limit`, `p`.`visits`, `p`.`submissions`, `p`.`accepted`, `p`.`difficulty`, `p`.`creation_date`, `p`.`source`, `p`.`order`, `p`.`deprecated`, `p`.`email_clarifications`, `p`.`quality`, `p`.`quality_histogram`, `p`.`difficulty_histogram`, `p`.`quality_seal`, `p`.`show_diff`, `p`.`allow_user_add_tags`
             
                FROM
                    Problems p
                INNER JOIN
                    ACLs a
                ON
                    a.acl_id = p.acl_id
                LEFT JOIN (
                    SELECT
                        s.problem_id,
                        s.identity_id,
                        MAX(r.score) AS score
                    FROM
                        Submissions s
                    INNER JOIN
                        Runs r ON r.run_id = s.current_run_id
                    WHERE
                        s.identity_id = ?
                    GROUP BY
                        s.problem_id, s.identity_id
                ) ps ON ps.problem_id = p.problem_id
                LEFT JOIN
                    User_Roles ur ON ur.user_id = ? AND p.acl_id = ur.acl_id AND ur.role_id = ?
                LEFT JOIN
                    Identities id ON id.identity_id = ? AND a.owner_id = id.user_id
                LEFT JOIN (
                    SELECT DISTINCT
                        gr.acl_id
                    FROM
                        Groups_Identities gi
                    INNER JOIN
                        Group_Roles gr ON gr.group_id = gi.group_id
                    WHERE gi.identity_id = ? AND gr.role_id = ?
                ) gr ON p.acl_id = gr.acl_id 
WHERE
(p.title LIKE CONCAT(?, ?, ?) OR p.alias LIKE CONCAT(?, ?, ?)) AND (p.visibility >= ? OR id.identity_id = ? OR ur.acl_id IS NOT NULL OR gr.acl_id IS NOT NULL) AND p.visibility > -? ORDER BY `ratio`  desc  LIMIT ?, ?
===========Clean query==================
 SELECT
                    DISTINCT tg.alias,
                    tg.create_time,
                    tg.description,
                    tg.name
                FROM
                    `Team_Groups` AS tg
                INNER JOIN
                    ACLs AS a ON a.acl_id = tg.acl_id
                WHERE
                    a.owner_id = ?
                ORDER BY
                    tg.create_time DESC
===========Clean query==================
 SELECT
                    p.problemset_id, p.acl_id
                FROM
                    Problemset_Problems pp
                INNER JOIN
                    Problemsets p
                ON
                    p.problemset_id = pp.problemset_id
                INNER JOIN
                    Assignments a
                ON
                    a.assignment_id = p.assignment_id
                WHERE
                    a.finish_time >= FROM_UNIXTIME(?) AND
                    pp.problem_id = ?
===========Clean query==================
 SELECT DISTINCT
                    ROUND(? / LOG2(GREATEST(p.accepted, ?) + ?), ?) AS points,
                    p.accepted / GREATEST(?, p.submissions)     AS ratio,
                    ROUND(? * IFNULL(ps.score, ?), ?)   AS score,
                    `p`.`problem_id`, `p`.`acl_id`, `p`.`visibility`, `p`.`title`, `p`.`alias`, `p`.`commit`, `p`.`current_version`, `p`.`languages`, `p`.`input_limit`, `p`.`visits`, `p`.`submissions`, `p`.`accepted`, `p`.`difficulty`, `p`.`creation_date`, `p`.`source`, `p`.`order`, `p`.`deprecated`, `p`.`email_clarifications`, `p`.`quality`, `p`.`quality_histogram`, `p`.`difficulty_histogram`, `p`.`quality_seal`, `p`.`show_diff`, `p`.`allow_user_add_tags`
             
                FROM
                    Problems p
                INNER JOIN
                    ACLs a
                ON
                    a.acl_id = p.acl_id
                LEFT JOIN (
                    SELECT
                        s.problem_id,
                        s.identity_id,
                        MAX(r.score) AS score
                    FROM
                        Submissions s
                    INNER JOIN
                        Runs r ON r.run_id = s.current_run_id
                    WHERE
                        s.identity_id = ?
                    GROUP BY
                        s.problem_id, s.identity_id
                ) ps ON ps.problem_id = p.problem_id
                LEFT JOIN
                    User_Roles ur ON ur.user_id = ? AND p.acl_id = ur.acl_id AND ur.role_id = ?
                LEFT JOIN
                    Identities id ON id.identity_id = ? AND a.owner_id = id.user_id
                LEFT JOIN (
                    SELECT DISTINCT
                        gr.acl_id
                    FROM
                        Groups_Identities gi
                    INNER JOIN
                        Group_Roles gr ON gr.group_id = gi.group_id
                    WHERE gi.identity_id = ? AND gr.role_id = ?
                ) gr ON p.acl_id = gr.acl_id 
WHERE
(p.title LIKE CONCAT(?, ?, ?) OR p.alias LIKE CONCAT(?, ?, ?)) AND (p.visibility >= ? OR id.identity_id = ? OR ur.acl_id IS NOT NULL OR gr.acl_id IS NOT NULL) AND p.visibility > -? ORDER BY `score`  desc  LIMIT ?, ?
===========Clean query==================
 SELECT COUNT(*) 
                FROM
                    Problems p
                INNER JOIN
                    ACLs a
                ON
                    a.acl_id = p.acl_id
                LEFT JOIN (
                    SELECT
                        s.problem_id,
                        s.identity_id,
                        MAX(r.score) AS score
                    FROM
                        Submissions s
                    INNER JOIN
                        Runs r ON r.run_id = s.current_run_id
                    WHERE
                        s.identity_id = ?
                    GROUP BY
                        s.problem_id, s.identity_id
                ) ps ON ps.problem_id = p.problem_id
                LEFT JOIN
                    User_Roles ur ON ur.user_id = ? AND p.acl_id = ur.acl_id AND ur.role_id = ?
                LEFT JOIN
                    Identities id ON id.identity_id = ? AND a.owner_id = id.user_id
                LEFT JOIN (
                    SELECT DISTINCT
                        gr.acl_id
                    FROM
                        Groups_Identities gi
                    INNER JOIN
                        Group_Roles gr ON gr.group_id = gi.group_id
                    WHERE gi.identity_id = ? AND gr.role_id = ?
                ) gr ON p.acl_id = gr.acl_id 
            INNER JOIN (
                SELECT
                    pt.problem_id,
                    BIT_AND(t.public) as public
                FROM
                    Problems_Tags pt
                INNER JOIN
                    Problems pp
                ON
                    pp.problem_id = pt.problem_id
                INNER JOIN
                    Tags t
                ON
                    pt.tag_id = t.tag_id
                WHERE pt.tag_id IN (
                    SELECT t.tag_id
                    FROM Tags t
                    WHERE t.name in (?,?)
                )
                AND (pp.allow_user_add_tags = ? OR pt.source <> ?)
                GROUP BY
                    pt.problem_id
                
            ) ptp ON ptp.problem_id = p.problem_id
WHERE
p.difficulty >= ?.? AND p.difficulty <= ? AND (p.title LIKE CONCAT(?, ?, ?) OR p.alias LIKE CONCAT(?, ?, ?)) AND (p.visibility >= ? OR id.identity_id = ? OR ur.acl_id IS NOT NULL OR gr.acl_id IS NOT NULL) AND p.visibility > -? AND (ptp.public OR id.identity_id = ?)
===========Clean query==================
 SELECT
                COUNT(*)
            FROM
                ((
            SELECT
                i.username,
                NULL AS alias,
                pal.ip,
                pal.`time`,
                IFNULL(ur.classname, "user-rank-unranked") AS classname,
                "open" AS event_type,
                NULL AS clone_result,
                NULL AS clone_token_payload,
                NULL AS name
            FROM
                Problemset_Access_Log pal
            INNER JOIN
                Identities i ON i.identity_id = pal.identity_id
            LEFT JOIN
                User_Rank ur ON ur.user_id = i.user_id
            INNER JOIN
                Assignments a ON a.problemset_id = pal.problemset_id
            WHERE
                a.course_id = ?
        ) UNION (
            SELECT
                i.username,
                p.alias,
                sl.ip,
                sl.`time`,
                IFNULL(ur.classname, "user-rank-unranked") AS classname,
                "submit" AS event_type,
                NULL AS clone_result,
                NULL AS clone_token_payload,
                NULL AS name
            FROM
                Submission_Log sl
            INNER JOIN
                Identities i ON i.identity_id = sl.identity_id
            LEFT JOIN
                User_Rank ur ON ur.user_id = i.user_id
            INNER JOIN
                Submissions s ON s.submission_id = sl.submission_id
            INNER JOIN
                Problems p ON p.problem_id = s.problem_id
            INNER JOIN
                Assignments a ON a.problemset_id = sl.problemset_id
            WHERE
                a.course_id = ?
        ) UNION (
            SELECT
                i.username,
                c.alias,
                INET_ATON(ccl.ip) AS `ip`,
                ccl.`timestamp` AS `time`,
                IFNULL(ur.classname, "user-rank-unranked") AS classname,
                "clone" AS event_type,
                ccl.result AS clone_result,
                ccl.token_payload AS clone_token_payload,
                c.name
            FROM
                Course_Clone_Log ccl
            INNER JOIN
                Users u ON u.user_id = ccl.user_id
            INNER JOIN
                Identities i ON i.identity_id = u.main_identity_id
            LEFT JOIN
                User_Rank ur ON ur.user_id = i.user_id
            LEFT JOIN
                Courses c ON c.course_id = ccl.new_course_id
            WHERE
                ccl.course_id = ?
        ) ORDER BY
            time DESC) AS total
===========Clean query==================
 SELECT
                s.`time`,
                i.username,
                s.guid,
                s.school_id,
                sc.name as school_name,
                p.alias,
                p.title,
                s.language,
                s.verdict,
                r.runtime,
                r.memory,
                IFNULL(ur.classname, ?) AS classname
            FROM
                Submissions s USE INDEX(PRIMARY)
            INNER JOIN
                Identities i ON i.identity_id = s.identity_id
            LEFT JOIN
                User_Rank ur ON ur.user_id = i.user_id
            INNER JOIN
                Problems p ON p.problem_id = s.problem_id
            INNER JOIN
                Runs r ON r.run_id = s.current_run_id
            INNER JOIN
                Users u ON u.main_identity_id = i.identity_id
            LEFT JOIN
                Schools sc ON sc.school_id = s.school_id
            LEFT JOIN
                Problemsets ps ON ps.problemset_id = s.problemset_id
            LEFT JOIN
                Contests c ON c.contest_id = ps.contest_id
            WHERE
                TIMESTAMPDIFF(SECOND, s.time, NOW()) <= ? * ?
                AND s.status = ?
                AND u.is_private = ?
                AND p.visibility >= ?
                AND (
                    s.problemset_id IS NULL
                    OR ps.access_mode = ?
                )
                AND (
                    c.contest_id IS NULL
                    OR c.finish_time < s.time
                )
        
            ORDER BY
                s.submission_id DESC
            LIMIT ?, ?
===========Clean query==================
 SELECT
                "total" AS gender,
                COUNT(DISTINCT ill.identity_id) AS users
            FROM
                Identity_Login_Log ill
            WHERE
                ill.time BETWEEN FROM_UNIXTIME(?) AND FROM_UNIXTIME(?)
            UNION
            SELECT
                IFNULL(i.gender, "unknown") AS gender,
                COUNT(DISTINCT ill.identity_id) AS users
            FROM
                Identity_Login_Log ill
            INNER JOIN
                Identities i ON i.identity_id = ill.identity_id
            WHERE
                ill.time BETWEEN FROM_UNIXTIME(?) AND FROM_UNIXTIME(?)
            GROUP BY
                gender
===========Clean query==================
 SELECT COUNT(*) 
            FROM
                Problems AS p
            INNER JOIN
                ACLs AS a ON a.acl_id = p.acl_id
            INNER JOIN
                Identities AS ai ON a.owner_id = ai.user_id
            LEFT JOIN
                User_Roles ur ON ur.acl_id = p.acl_id
            LEFT JOIN
                Identities uri ON ur.user_id = uri.user_id
            LEFT JOIN
                Group_Roles gr ON gr.acl_id = p.acl_id
            LEFT JOIN
                Groups_Identities gi ON gi.group_id = gr.group_id
            WHERE
                (ai.identity_id = ? OR
                (ur.role_id = ? AND uri.identity_id = ?) OR
                (gr.role_id = ? AND gi.identity_id = ?)) AND
                p.visibility > -?  AND (
                p.title LIKE CONCAT("%", ?, "%") OR
                p.alias LIKE CONCAT("%", ?, "%")
            )
===========Clean query==================
 SELECT
                `Certificates`.`certificate_id`,
                `Certificates`.`identity_id`,
                `Certificates`.`timestamp`,
                `Certificates`.`certificate_type`,
                `Certificates`.`course_id`,
                `Certificates`.`contest_id`,
                `Certificates`.`coder_of_the_month_id`,
                `Certificates`.`verification_code`,
                `Certificates`.`contest_place`
            FROM
                `Certificates`
===========Clean query==================
 SELECT DISTINCT
                `c`.`course_id`, `c`.`name`, `c`.`description`, `c`.`objective`, `c`.`alias`, `c`.`group_id`, `c`.`acl_id`, `c`.`level`, `c`.`start_time`, `c`.`finish_time`, `c`.`admission_mode`, `c`.`school_id`, `c`.`needs_basic_information`, `c`.`requests_user_information`, `c`.`show_scoreboard`, `c`.`languages`, `c`.`archived`, `c`.`minimum_progress_for_certificate`, `c`.`certificates_status`, `c`.`recommended`
                FROM Courses c
                WHERE c.name
                LIKE CONCAT(?, ?, ?) LIMIT ?
===========Clean query==================
 SELECT
    DISTINCT `ur`.`user_id`
FROM
    `User_Rank` AS `ur`
WHERE
    `ur`.`score` >= ?
===========Clean query==================
 SELECT
                    c.alias,
                    c.name,
                    s.name as school_name,
                    IFNULL(pr.progress, ?.?) AS progress
                FROM
                    Courses c
                LEFT JOIN
                    Schools s ON c.school_id = s.school_id
                LEFT JOIN (
                    -- we want a score even if there are no submissions yet
                    -- and that score should not be greater than ?%
                    SELECT
                        cbpr.course_id,
                        LEAST(?, ROUND(SUM(cbpr.total_assignment_score) / SUM(cbpr.max_points) * ?, ?)) AS progress
                    FROM (
                        -- Aggregate all problem scores of an assignment.
                        SELECT
                            a.alias,
                            a.course_id,
                            a.assignment_id,
                            IFNULL(
                                -- Get the best score of each problem.
                                (
                                    SELECT
                                        SUM(ps.contest_score)
                                    FROM (
                                        SELECT
                                            psp.problem_id,
                                            MAX(r.contest_score) AS contest_score
                                        FROM
                                            Problemset_Problems psp
                                        INNER JOIN
                                            Submissions s ON s.problem_id = psp.problem_id AND s.problemset_id = psp.problemset_id
                                        INNER JOIN
                                            Runs r ON r.run_id = s.current_run_id
                                        WHERE
                                            psp.problemset_id = a.problemset_id AND
                                            s.identity_id = ?
                                        GROUP BY
                                            psp.problem_id
                                    ) AS ps
                                ),
                                ?.?
                            ) AS total_assignment_score,
                            a.max_points
                        FROM
                            Assignments a
                        WHERE
                            EXISTS (
                                SELECT
                                    *
                                FROM
                                    Problemset_Problems psp
                                INNER JOIN
                                    Submissions s ON s.problemset_id = psp.problemset_id AND s.problem_id = psp.problem_id
                                WHERE
                                    psp.problemset_id = a.problemset_id AND
                                    s.identity_id = ?
                            )
                        GROUP BY
                            a.assignment_id
                    ) cbpr
                    GROUP BY cbpr.course_id
                ) pr ON c.course_id = pr.course_id
                WHERE
                    c.archived = ? AND
                    EXISTS (
                        SELECT
                            *
                        FROM
                            Groups_Identities gi
                        WHERE
                            gi.group_id = c.group_id AND
                            gi.identity_id = ?
                    )
                ORDER BY
                    c.name ASC, c.finish_time DESC
===========Clean query==================
 SELECT COUNT(*) 
                FROM
                    Problems p
                LEFT JOIN (
                    SELECT
                        Submissions.problem_id,
                        MAX(Runs.score) AS score
                    FROM
                        Submissions
                    INNER JOIN
                        Runs ON Runs.run_id = Submissions.current_run_id
                    WHERE
                        Submissions.identity_id = ?
                    GROUP BY
                        Submissions.problem_id
                    ) ps ON ps.problem_id = p.problem_id 
WHERE
(
                    p.title LIKE CONCAT(?, ?, ?) OR
                    p.alias LIKE CONCAT(?, ?, ?) OR
                    p.problem_id = ?
                    ) AND p.visibility > -?
===========Clean query==================
 SELECT
                COUNT(?)
        
            FROM
                `User_Rank` `ur`
            WHERE
                `ur`.`author_score` IS NOT NULL AND
                `ur`.`author_ranking` IS NOT NULL
===========Clean query==================
 SELECT
                `Course_Clone_Log`.`course_clone_log_id`,
                `Course_Clone_Log`.`ip`,
                `Course_Clone_Log`.`course_id`,
                `Course_Clone_Log`.`new_course_id`,
                `Course_Clone_Log`.`token_payload`,
                `Course_Clone_Log`.`timestamp`,
                `Course_Clone_Log`.`user_id`,
                `Course_Clone_Log`.`result`
            FROM
                `Course_Clone_Log`
===========Clean query==================
 SELECT DISTINCT
                    ROUND(? / LOG2(GREATEST(p.accepted, ?) + ?), ?) AS points,
                    p.accepted / GREATEST(?, p.submissions)     AS ratio,
                    ROUND(? * IFNULL(ps.score, ?), ?)   AS score,
                    `p`.`problem_id`, `p`.`acl_id`, `p`.`visibility`, `p`.`title`, `p`.`alias`, `p`.`commit`, `p`.`current_version`, `p`.`languages`, `p`.`input_limit`, `p`.`visits`, `p`.`submissions`, `p`.`accepted`, `p`.`difficulty`, `p`.`creation_date`, `p`.`source`, `p`.`order`, `p`.`deprecated`, `p`.`email_clarifications`, `p`.`quality`, `p`.`quality_histogram`, `p`.`difficulty_histogram`, `p`.`quality_seal`, `p`.`show_diff`, `p`.`allow_user_add_tags`
             
                FROM
                    Problems p
                INNER JOIN
                    ACLs a
                ON
                    a.acl_id = p.acl_id
                LEFT JOIN (
                    SELECT
                        s.problem_id,
                        s.identity_id,
                        MAX(r.score) AS score
                    FROM
                        Submissions s
                    INNER JOIN
                        Runs r ON r.run_id = s.current_run_id
                    WHERE
                        s.identity_id = ?
                    GROUP BY
                        s.problem_id, s.identity_id
                ) ps ON ps.problem_id = p.problem_id
                LEFT JOIN
                    User_Roles ur ON ur.user_id = ? AND p.acl_id = ur.acl_id AND ur.role_id = ?
                LEFT JOIN
                    Identities id ON id.identity_id = ? AND a.owner_id = id.user_id
                LEFT JOIN (
                    SELECT DISTINCT
                        gr.acl_id
                    FROM
                        Groups_Identities gi
                    INNER JOIN
                        Group_Roles gr ON gr.group_id = gi.group_id
                    WHERE gi.identity_id = ? AND gr.role_id = ?
                ) gr ON p.acl_id = gr.acl_id 
WHERE
(p.title LIKE CONCAT(?, ?, ?) OR p.alias LIKE CONCAT(?, ?, ?)) AND (p.visibility >= ? OR id.identity_id = ? OR ur.acl_id IS NOT NULL OR gr.acl_id IS NOT NULL) AND p.visibility > -? ORDER BY `quality`  desc  LIMIT ?, ?
===========Clean query==================
 SELECT
                `ur`.`author_ranking`,
                `ur`.`author_score`,
                `ur`.`username`,
                `ur`.`country_id`,
                `ur`.`name`,
                IFNULL(`ur`.`classname`, "user-rank-unranked") AS classname
        
            FROM
                `User_Rank` `ur`
            WHERE
                `ur`.`author_score` IS NOT NULL AND
                `ur`.`author_ranking` IS NOT NULL
        
            ORDER BY
                    `ur`.`author_ranking` ASC
         LIMIT ?, ?
===========Clean query==================
 SELECT
                cl.clarification_id,
                ps.assignment_alias AS assignment_alias,
                p.alias AS problem_alias,
                i.username AS author,
                r.username AS receiver,
                cl.message,
                cl.answer,
                cl.`time`,
                cl.public
        
            FROM
                (
            SELECT
                problemset_id,
                alias AS assignment_alias
            FROM
                Assignments
            WHERE
                course_id = ?
            ) ps
            INNER JOIN
                Clarifications cl ON cl.problemset_id = ps.problemset_id
            INNER JOIN
                Identities i ON i.identity_id = cl.author_id
            LEFT JOIN
                Identities r ON r.identity_id = cl.receiver_id
            INNER JOIN
                Problems p ON p.problem_id = cl.problem_id
            
                AND (
                    cl.public = ?
                    OR cl.author_id = ?
                    OR cl.receiver_id = ?
                )
            ORDER BY
                cl.answer IS NULL DESC,
                cl.clarification_id DESC
===========Clean query==================
 SELECT
                `Submissions`.`submission_id`,
                `Submissions`.`current_run_id`,
                `Submissions`.`identity_id`,
                `Submissions`.`problem_id`,
                `Submissions`.`problemset_id`,
                `Submissions`.`guid`,
                `Submissions`.`language`,
                `Submissions`.`time`,
                `Submissions`.`status`,
                `Submissions`.`verdict`,
                `Submissions`.`submit_delay`,
                `Submissions`.`type`,
                `Submissions`.`school_id`
            FROM
                `Submissions`
===========Clean query==================
 SELECT `g`.`group_id`, `g`.`acl_id`, `g`.`create_time`, `g`.`alias`, `g`.`name`, `g`.`description` FROM `Groups_` AS `g` WHERE `g`.`name` = ? LIMIT ?
===========Clean query==================
 SELECT
                `s`.`school_id`, `s`.`country_id`, `s`.`state_id`, `s`.`name`, `s`.`ranking`, `s`.`score`
            FROM
                Schools s
            WHERE
                s.name LIKE CONCAT(?, ?, ?)
            LIMIT ?
===========Clean query==================
 SELECT
                
                                Contests.contest_id,
                                Contests.problemset_id,
                                Contests.title,
                                Contests.description,
                                Contests.finish_time AS original_finish_time,
                                Contests.start_time,
                                Contests.finish_time,
                                Contests.admission_mode,
                                Contests.score_mode,
                                Contests.alias,
                                Contests.recommended,
                                Contests.window_length,
                                Contests.last_updated,
                                Contests.rerun_id
                                ,
                p.scoreboard_url,
                p.scoreboard_url_admin
            FROM
                Contests
            INNER JOIN
                ACLs a ON a.acl_id = Contests.acl_id
            INNER JOIN
                Users u ON u.user_id = a.owner_id
            INNER JOIN
                Problemsets p ON p.problemset_id = Contests.problemset_id
            WHERE
                u.main_identity_id = ?
                AND archived = false
            ORDER BY
                Contests.contest_id DESC
===========Clean query==================
 SELECT
    DISTINCT `u`.`user_id`
FROM
    `Problems` AS `p`
INNER JOIN
    `Submissions` AS `s` ON `p`.`problem_id` = `s`.`problem_id`
INNER JOIN
    `Runs` AS `r` ON `r`.`run_id` = `s`.`current_run_id`
INNER JOIN
    `Identities` AS `i` ON `s`.`identity_id` = `i`.`identity_id`
INNER JOIN
    `Users` AS `u` ON `u`.`main_identity_id` = `i`.`identity_id`
WHERE
    `r`.`verdict` = "AC" AND
    `s`.`type` = "normal" AND
    `p`.`visibility` >= ? AND
    `s`.`language`=?
GROUP BY
    `u`.`user_id`
HAVING
    COUNT(DISTINCT `p`.`problem_id`) > ?
===========Clean query==================
 SELECT
            `c`.`course_id`, `c`.`name`, `c`.`description`, `c`.`objective`, `c`.`alias`, `c`.`group_id`, `c`.`acl_id`, `c`.`level`, `c`.`start_time`, `c`.`finish_time`, `c`.`admission_mode`, `c`.`school_id`, `c`.`needs_basic_information`, `c`.`requests_user_information`, `c`.`show_scoreboard`, `c`.`languages`, `c`.`archived`, `c`.`minimum_progress_for_certificate`, `c`.`certificates_status`, `c`.`recommended`
            FROM
                Courses c
            INNER JOIN
                ACLs a ON a.acl_id = c.acl_id
            INNER JOIN
                Users u ON u.user_id = a.owner_id
            WHERE
                u.main_identity_id = ?
                AND archived = false
            ORDER BY
                c.course_id DESC
===========Clean query==================
 SELECT
                IFNULL(`ur`.`author_ranking`, ?) AS `author_ranking`,
                IFNULL(`ur`.`author_score`, ?) AS `author_score`,
                `ur`.`country_id`,
                `ur`.`username`,
                `ur`.`name`,
                IFNULL(`ur`.`classname`, "user-rank-unranked") AS classname
        
            FROM
                `User_Rank` `ur`
            WHERE
                `ur`.`author_score` IS NOT NULL AND
                `ur`.`author_ranking` IS NOT NULL AND
                (
                    SELECT
                        COUNT(*)
                    FROM
                        `Problems` `p`
                    INNER JOIN
                        `ACLs` `acl` ON `p`.`acl_id` = `acl`.`acl_id`
                    INNER JOIN
                        `Users` `u` ON `u`.`user_id` = `acl`.`owner_id`
                    WHERE
                    `u`.`user_id` = `ur`.`user_id` AND `p`.`quality_seal` = ?
                ) > ?
        
            ORDER BY
                    `ur`.`author_ranking` ASC
         LIMIT ?, ?
===========Clean query==================
 SELECT
                `Problemset_Access_Log`.`problemset_id`,
                `Problemset_Access_Log`.`identity_id`,
                `Problemset_Access_Log`.`ip`,
                `Problemset_Access_Log`.`time`
            FROM
                `Problemset_Access_Log`
===========Clean query==================
 SELECT
                    `Problem_Of_The_Week`.`problem_of_the_week_id`, `Problem_Of_The_Week`.`problem_id`, `Problem_Of_The_Week`.`time`, `Problem_Of_The_Week`.`difficulty`
                FROM
                    Problem_Of_The_Week
                WHERE
                    difficulty = ?
===========Clean query==================
 SELECT DISTINCT
                    ROUND(? / LOG2(GREATEST(p.accepted, ?) + ?), ?) AS points,
                    p.accepted / GREATEST(?, p.submissions)     AS ratio,
                    ROUND(? * IFNULL(ps.score, ?), ?)   AS score,
                    `p`.`problem_id`, `p`.`acl_id`, `p`.`visibility`, `p`.`title`, `p`.`alias`, `p`.`commit`, `p`.`current_version`, `p`.`languages`, `p`.`input_limit`, `p`.`visits`, `p`.`submissions`, `p`.`accepted`, `p`.`difficulty`, `p`.`creation_date`, `p`.`source`, `p`.`order`, `p`.`deprecated`, `p`.`email_clarifications`, `p`.`quality`, `p`.`quality_histogram`, `p`.`difficulty_histogram`, `p`.`quality_seal`, `p`.`show_diff`, `p`.`allow_user_add_tags`
             
                FROM
                    Problems p
                INNER JOIN
                    ACLs a
                ON
                    a.acl_id = p.acl_id
                LEFT JOIN (
                    SELECT
                        s.problem_id,
                        s.identity_id,
                        MAX(r.score) AS score
                    FROM
                        Submissions s
                    INNER JOIN
                        Runs r ON r.run_id = s.current_run_id
                    WHERE
                        s.identity_id = ?
                    GROUP BY
                        s.problem_id, s.identity_id
                ) ps ON ps.problem_id = p.problem_id
                LEFT JOIN
                    User_Roles ur ON ur.user_id = ? AND p.acl_id = ur.acl_id AND ur.role_id = ?
                LEFT JOIN
                    Identities id ON id.identity_id = ? AND a.owner_id = id.user_id
                LEFT JOIN (
                    SELECT DISTINCT
                        gr.acl_id
                    FROM
                        Groups_Identities gi
                    INNER JOIN
                        Group_Roles gr ON gr.group_id = gi.group_id
                    WHERE gi.identity_id = ? AND gr.role_id = ?
                ) gr ON p.acl_id = gr.acl_id 
WHERE
(p.title LIKE CONCAT(?, ?, ?) OR p.alias LIKE CONCAT(?, ?, ?)) AND (p.visibility >= ? OR id.identity_id = ? OR ur.acl_id IS NOT NULL OR gr.acl_id IS NOT NULL) AND p.visibility > -? ORDER BY `title` COLLATE utf8mb4_bin asc  LIMIT ?, ?
===========Clean query==================
 SELECT
                        alias, title, IFNULL(SUM(relevance), ?.?) AS relevance
             FROM
                    (
                        SELECT
                            alias, title,
                            ?.? AS relevance
                        FROM
                            Problems p
                        WHERE
                            alias = ?
                        UNION ALL
                        SELECT
                            alias, title,
                            ?.? AS relevance
                        FROM
                            Problems p
                        WHERE
                            title = ?
                        UNION ALL
                        SELECT
                            alias, title,
                            ?.? AS relevance
                        FROM
                            Problems p
                        WHERE
                            (
                                title LIKE CONCAT(?, ?, ?) OR
                                alias LIKE CONCAT(?, ?, ?) OR
                                problem_id = ?
                            )
                        UNION ALL
                        SELECT
                            alias, title,
                            IFNULL(
                                MATCH(alias, title)
                                AGAINST (? IN BOOLEAN MODE), ?.?
                            ) AS relevance
                        FROM
                            Problems p
                        WHERE
                            MATCH(alias, title)
                            AGAINST (? IN BOOLEAN MODE)
                    ) AS p 
                        GROUP BY alias, title
             
                        ORDER BY relevance DESC
              LIMIT ?, ?
===========Clean query==================
 SELECT
                    i.identity_id,
                    i.username,
                    i.name,
                    IFNULL(i.country_id, ?) AS country_id,
                    FALSE AS is_invited,
                    IFNULL(ur.classname, ?) AS classname
                FROM
                    Submissions s
                INNER JOIN
                    Identities i ON i.identity_id = s.identity_id
                LEFT JOIN
                    User_Rank ur ON ur.user_id = i.user_id
                WHERE
                    s.problemset_id = ? AND
                    s.type = ? AND
                    s.status = ? AND
                    s.verdict NOT IN (?, ?, ?)
                    
                GROUP BY
                    s.identity_id
===========Clean query==================
 SELECT DISTINCT
                    ROUND(? / LOG2(GREATEST(p.accepted, ?) + ?), ?) AS points,
                    p.accepted / GREATEST(?, p.submissions)     AS ratio,
                    ROUND(? * IFNULL(ps.score, ?), ?)   AS score,
                    `p`.`problem_id`, `p`.`acl_id`, `p`.`visibility`, `p`.`title`, `p`.`alias`, `p`.`commit`, `p`.`current_version`, `p`.`languages`, `p`.`input_limit`, `p`.`visits`, `p`.`submissions`, `p`.`accepted`, `p`.`difficulty`, `p`.`creation_date`, `p`.`source`, `p`.`order`, `p`.`deprecated`, `p`.`email_clarifications`, `p`.`quality`, `p`.`quality_histogram`, `p`.`difficulty_histogram`, `p`.`quality_seal`, `p`.`show_diff`, `p`.`allow_user_add_tags`
             
                FROM
                    Problems p
                INNER JOIN
                    ACLs a
                ON
                    a.acl_id = p.acl_id
                LEFT JOIN (
                    SELECT
                        s.problem_id,
                        s.identity_id,
                        MAX(r.score) AS score
                    FROM
                        Submissions s
                    INNER JOIN
                        Runs r ON r.run_id = s.current_run_id
                    WHERE
                        s.identity_id = ?
                    GROUP BY
                        s.problem_id, s.identity_id
                ) ps ON ps.problem_id = p.problem_id
                LEFT JOIN
                    User_Roles ur ON ur.user_id = ? AND p.acl_id = ur.acl_id AND ur.role_id = ?
                LEFT JOIN
                    Identities id ON id.identity_id = ? AND a.owner_id = id.user_id
                LEFT JOIN (
                    SELECT DISTINCT
                        gr.acl_id
                    FROM
                        Groups_Identities gi
                    INNER JOIN
                        Group_Roles gr ON gr.group_id = gi.group_id
                    WHERE gi.identity_id = ? AND gr.role_id = ?
                ) gr ON p.acl_id = gr.acl_id 
WHERE
(p.title LIKE CONCAT(?, ?, ?) OR p.alias LIKE CONCAT(?, ?, ?)) AND (p.visibility >= ? OR id.identity_id = ? OR ur.acl_id IS NOT NULL OR gr.acl_id IS NOT NULL) AND p.visibility > -? ORDER BY p.quality IS NULL, p.quality ASC LIMIT ?, ?
===========Clean query==================
 SELECT
            IFNULL(i.username, "") AS `username`,
            IFNULL(ur.classname, "user-rank-unranked") AS classname,
            IFNULL(
                (
                    SELECT
                        COUNT(DISTINCT Problems.problem_id)
                    FROM
                        Users
                    INNER JOIN
                        ACLs ON ACLs.owner_id = Users.user_id
                    INNER JOIN
                        Problems ON Problems.acl_id = ACLs.acl_id
                    WHERE
                        Problems.visibility = ? AND
                        Users.main_identity_id = i.identity_id
                ),
                ?
            ) AS created_problems,
            IFNULL(
                (
                    SELECT
                        COUNT(DISTINCT Problems.problem_id)
                    FROM
                        Problems
                    INNER JOIN
                        Submissions ON Submissions.problem_id = Problems.problem_id
                    INNER JOIN
                        Runs ON Runs.run_id = Submissions.current_run_id
                    WHERE
                        Runs.verdict = "AC"
                        AND Submissions.identity_id = i.identity_id
                        AND Submissions.type = "normal"
                ),
                ?
            ) AS solved_problems,
            IFNULL(
                (
                    SELECT
                        COUNT(DISTINCT Contests.contest_id)
                    FROM
                        Contests
                    INNER JOIN
                        ACLs ON ACLs.acl_id = Contests.acl_id
                    INNER JOIN
                        Users ON Users.user_id = ACLs.owner_id
                    INNER JOIN
                        Problemsets ON Problemsets.problemset_id = Contests.problemset_id
                    WHERE
                        Users.main_identity_id = i.identity_id
                ),
                ?
            ) AS organized_contests
        FROM
            Schools sc
        INNER JOIN
            Identities_Schools isc ON isc.school_id = sc.school_id
        INNER JOIN
            Identities i ON i.current_identity_school_id = isc.identity_school_id
        LEFT JOIN
            User_Rank ur ON ur.user_id = i.user_id
        WHERE
            sc.school_id = ?
===========Clean query==================
 SELECT
                COUNT(DISTINCT si.school_id)
            FROM
                (
                    SELECT
                        isc.school_id,
                        COUNT(DISTINCT i.identity_id) AS distinct_identities
                    FROM
                        Submissions s
                    INNER JOIN
                        Identities i ON i.identity_id = s.identity_id
                    LEFT JOIN
                        Identities_Schools isc ON isc.identity_school_id = i.current_identity_school_id
                    WHERE
                        s.time BETWEEN FROM_UNIXTIME(?) AND FROM_UNIXTIME(?)
                    GROUP BY
                        isc.school_id
                    HAVING
                        distinct_identities >= ?
                ) AS si
===========Clean query==================
 SELECT
                        
                                Contests.contest_id,
                                Contests.problemset_id,
                                Contests.title,
                                Contests.description,
                                Contests.finish_time AS original_finish_time,
                                Contests.start_time,
                                Contests.finish_time,
                                Contests.admission_mode,
                                Contests.score_mode,
                                Contests.alias,
                                Contests.recommended,
                                Contests.window_length,
                                Contests.last_updated,
                                Contests.rerun_id
                                ,
                        p.scoreboard_url,
                        p.scoreboard_url_admin 
            FROM
                Contests
            INNER JOIN
                ACLs a ON a.acl_id = Contests.acl_id
            INNER JOIN
                Users u ON u.user_id = a.owner_id
            INNER JOIN
                Problemsets p ON p.problemset_id = Contests.problemset_id
            WHERE
                u.main_identity_id = ?
                AND archived = ? 
            ORDER BY
                Contests.contest_id DESC
            LIMIT ?, ?
===========Clean query==================
 SELECT COUNT(*) 
            FROM
                Problems AS p
            INNER JOIN
                ACLs AS a ON a.acl_id = p.acl_id
            INNER JOIN
                Identities AS ai ON a.owner_id = ai.user_id
            LEFT JOIN
                User_Roles ur ON ur.acl_id = p.acl_id
            LEFT JOIN
                Identities uri ON ur.user_id = uri.user_id
            LEFT JOIN
                Group_Roles gr ON gr.acl_id = p.acl_id
            LEFT JOIN
                Groups_Identities gi ON gi.group_id = gr.group_id
            WHERE
                (ai.identity_id = ? OR
                (ur.role_id = ? AND uri.identity_id = ?) OR
                (gr.role_id = ? AND gi.identity_id = ?)) AND
                p.visibility > -?
===========Clean query==================
 SELECT DISTINCT
                    ROUND(? / LOG2(GREATEST(p.accepted, ?) + ?), ?) AS points,
                    p.accepted / GREATEST(?, p.submissions)     AS ratio,
                    ROUND(? * IFNULL(ps.score, ?), ?)   AS score,
                    `p`.`problem_id`, `p`.`acl_id`, `p`.`visibility`, `p`.`title`, `p`.`alias`, `p`.`commit`, `p`.`current_version`, `p`.`languages`, `p`.`input_limit`, `p`.`visits`, `p`.`submissions`, `p`.`accepted`, `p`.`difficulty`, `p`.`creation_date`, `p`.`source`, `p`.`order`, `p`.`deprecated`, `p`.`email_clarifications`, `p`.`quality`, `p`.`quality_histogram`, `p`.`difficulty_histogram`, `p`.`quality_seal`, `p`.`show_diff`, `p`.`allow_user_add_tags`
             
                FROM
                    Problems p
                INNER JOIN
                    ACLs a
                ON
                    a.acl_id = p.acl_id
                LEFT JOIN (
                    SELECT
                        s.problem_id,
                        s.identity_id,
                        MAX(r.score) AS score
                    FROM
                        Submissions s
                    INNER JOIN
                        Runs r ON r.run_id = s.current_run_id
                    WHERE
                        s.identity_id = ?
                    GROUP BY
                        s.problem_id, s.identity_id
                ) ps ON ps.problem_id = p.problem_id
                LEFT JOIN
                    User_Roles ur ON ur.user_id = ? AND p.acl_id = ur.acl_id AND ur.role_id = ?
                LEFT JOIN
                    Identities id ON id.identity_id = ? AND a.owner_id = id.user_id
                LEFT JOIN (
                    SELECT DISTINCT
                        gr.acl_id
                    FROM
                        Groups_Identities gi
                    INNER JOIN
                        Group_Roles gr ON gr.group_id = gi.group_id
                    WHERE gi.identity_id = ? AND gr.role_id = ?
                ) gr ON p.acl_id = gr.acl_id 
WHERE
(p.title LIKE CONCAT(?, ?, ?) OR p.alias LIKE CONCAT(?, ?, ?)) AND (p.visibility >= ? OR id.identity_id = ? OR ur.acl_id IS NOT NULL OR gr.acl_id IS NOT NULL) AND p.visibility > -? ORDER BY `score`  asc  LIMIT ?, ?
===========Clean query==================
 SELECT
    DISTINCT `u`.`user_id`
FROM
    `Problems` AS `p`
INNER JOIN
    `Submissions` AS `s` ON `p`.`problem_id` = `s`.`problem_id`
INNER JOIN
    `Runs` AS `r` ON `r`.`run_id` = `s`.`current_run_id`
INNER JOIN
    `Identities` AS `i` ON `s`.`identity_id` = `i`.`identity_id`
INNER JOIN
    `Users` AS `u` ON `u`.`main_identity_id` = `i`.`identity_id`
WHERE
    `r`.`verdict` = "AC" AND `s`.`type` = "normal"
GROUP BY
    `u`.`user_id`
HAVING
    COUNT(DISTINCT `p`.`problem_id`) >= ?
===========Clean query==================
 SELECT
    DISTINCT `u`.`user_id`
FROM
    `Problems` AS `p`
INNER JOIN
    `Submissions` AS `s` ON `p`.`problem_id` = `s`.`problem_id`
INNER JOIN
    `Runs` AS `r` ON `r`.`run_id` = `s`.`current_run_id`
INNER JOIN
    `Identities` AS `i` ON `s`.`identity_id` = `i`.`identity_id`
INNER JOIN
    `Users` AS `u` ON `u`.`main_identity_id` = `i`.`identity_id`
WHERE
    `r`.`verdict` = "AC" AND
    `s`.`type` = "normal" AND
    `p`.`visibility` >= ? AND
    `s`.`language` = "pas"
GROUP BY
    `u`.`user_id`
HAVING
    COUNT(DISTINCT `p`.`problem_id`) > ?
===========Clean query==================
 SELECT
                `Countries`.`country_id`,
                `Countries`.`name`
            FROM
                `Countries`
         ORDER BY `name` ASC
===========Clean query==================
 SELECT
                    `c`.`course_id`, `c`.`name`, `c`.`description`, `c`.`objective`, `c`.`alias`, `c`.`group_id`, `c`.`acl_id`, `c`.`level`, `c`.`start_time`, `c`.`finish_time`, `c`.`admission_mode`, `c`.`school_id`, `c`.`needs_basic_information`, `c`.`requests_user_information`, `c`.`show_scoreboard`, `c`.`languages`, `c`.`archived`, `c`.`minimum_progress_for_certificate`, `c`.`certificates_status`, `c`.`recommended`,
                    ur.role_id AS user_role,
                    gr.role_id AS group_role
                FROM
                    Courses AS c
                INNER JOIN
                    ACLs AS a ON a.acl_id = c.acl_id
                INNER JOIN
                    Identities AS ai ON a.owner_id = ai.user_id
                LEFT JOIN
                    User_Roles ur ON ur.acl_id = c.acl_id
                LEFT JOIN
                    Identities uri ON ur.user_id = uri.user_id
                LEFT JOIN
                    Group_Roles gr ON gr.acl_id = c.acl_id
                LEFT JOIN
                    Groups_Identities gi ON gi.group_id = gr.group_id
                WHERE
                    c.archived = ? AND (
                        ai.identity_id = ? OR
                        (ur.role_id = ? AND uri.identity_id = ?) OR
                        (gr.role_id = ? AND gi.identity_id = ?) OR
                        (ur.role_id = ? AND uri.identity_id = ?) OR
                        (gr.role_id = ? AND gi.identity_id = ?)
                    )
                GROUP BY
                    c.course_id, user_role, group_role
                ORDER BY
                    c.course_id DESC
                LIMIT
                    ?, ?
===========Clean query==================
 SELECT
                    sq.name,
                    sq.username,
                    SUM(sq.relevance) AS relevance
                FROM (
                    SELECT
                        i.name,
                        i.username,
                        IFNULL(MATCH(name, username) AGAINST (? IN BOOLEAN MODE), ?) AS relevance
                    FROM
                        Identities i
                    WHERE
                        MATCH(name, username) AGAINST (? IN BOOLEAN MODE)
                    UNION DISTINCT
                    SELECT DISTINCT
                        i.name,
                        i.username,
                        ? AS relevance
                    FROM
                        Identities i
                    WHERE
                        (
                            i.username LIKE CONCAT(?, ?, ?) OR
                            i.name LIKE CONCAT(?, ?, ?)
                        ) AND
                        i.username NOT REGEXP ?
                ) AS sq
            GROUP BY
                username, name
            ORDER BY
                relevance DESC
            LIMIT
                ?
===========Clean query==================
 SELECT COUNT(*) 
                FROM
                    Problems p
                INNER JOIN
                    ACLs a
                ON
                    a.acl_id = p.acl_id
                LEFT JOIN (
                    SELECT
                        s.problem_id,
                        s.identity_id,
                        MAX(r.score) AS score
                    FROM
                        Submissions s
                    INNER JOIN
                        Runs r ON r.run_id = s.current_run_id
                    WHERE
                        s.identity_id = ?
                    GROUP BY
                        s.problem_id, s.identity_id
                ) ps ON ps.problem_id = p.problem_id
                LEFT JOIN
                    User_Roles ur ON ur.user_id = ? AND p.acl_id = ur.acl_id AND ur.role_id = ?
                LEFT JOIN
                    Identities id ON id.identity_id = ? AND a.owner_id = id.user_id
                LEFT JOIN (
                    SELECT DISTINCT
                        gr.acl_id
                    FROM
                        Groups_Identities gi
                    INNER JOIN
                        Group_Roles gr ON gr.group_id = gi.group_id
                    WHERE gi.identity_id = ? AND gr.role_id = ?
                ) gr ON p.acl_id = gr.acl_id 
            INNER JOIN (
                SELECT
                    pt.problem_id,
                    BIT_AND(t.public) as public
                FROM
                    Problems_Tags pt
                INNER JOIN
                    Problems pp
                ON
                    pp.problem_id = pt.problem_id
                INNER JOIN
                    Tags t
                ON
                    pt.tag_id = t.tag_id
                WHERE pt.tag_id IN (
                    SELECT t.tag_id
                    FROM Tags t
                    WHERE t.name in (?,?)
                )
                AND (pp.allow_user_add_tags = ? OR pt.source <> ?)
                GROUP BY
                    pt.problem_id
                
            ) ptp ON ptp.problem_id = p.problem_id
WHERE
(p.difficulty IS NULL OR (p.difficulty >= ? AND p.difficulty <= ?)) AND (p.title LIKE CONCAT(?, ?, ?) OR p.alias LIKE CONCAT(?, ?, ?)) AND (p.visibility >= ? OR id.identity_id = ? OR ur.acl_id IS NOT NULL OR gr.acl_id IS NOT NULL) AND p.visibility > -? AND (ptp.public OR id.identity_id = ?)
===========Clean query==================
 SELECT DISTINCT
                    ROUND(? / LOG2(GREATEST(p.accepted, ?) + ?), ?) AS points,
                    p.accepted / GREATEST(?, p.submissions)     AS ratio,
                    ROUND(? * IFNULL(ps.score, ?), ?)   AS score,
                    `p`.`problem_id`, `p`.`acl_id`, `p`.`visibility`, `p`.`title`, `p`.`alias`, `p`.`commit`, `p`.`current_version`, `p`.`languages`, `p`.`input_limit`, `p`.`visits`, `p`.`submissions`, `p`.`accepted`, `p`.`difficulty`, `p`.`creation_date`, `p`.`source`, `p`.`order`, `p`.`deprecated`, `p`.`email_clarifications`, `p`.`quality`, `p`.`quality_histogram`, `p`.`difficulty_histogram`, `p`.`quality_seal`, `p`.`show_diff`, `p`.`allow_user_add_tags`
             
                FROM
                    Problems p
                INNER JOIN
                    ACLs a
                ON
                    a.acl_id = p.acl_id
                LEFT JOIN (
                    SELECT
                        s.problem_id,
                        s.identity_id,
                        MAX(r.score) AS score
                    FROM
                        Submissions s
                    INNER JOIN
                        Runs r ON r.run_id = s.current_run_id
                    WHERE
                        s.identity_id = ?
                    GROUP BY
                        s.problem_id, s.identity_id
                ) ps ON ps.problem_id = p.problem_id
                LEFT JOIN
                    User_Roles ur ON ur.user_id = ? AND p.acl_id = ur.acl_id AND ur.role_id = ?
                LEFT JOIN
                    Identities id ON id.identity_id = ? AND a.owner_id = id.user_id
                LEFT JOIN (
                    SELECT DISTINCT
                        gr.acl_id
                    FROM
                        Groups_Identities gi
                    INNER JOIN
                        Group_Roles gr ON gr.group_id = gi.group_id
                    WHERE gi.identity_id = ? AND gr.role_id = ?
                ) gr ON p.acl_id = gr.acl_id 
            INNER JOIN (
                SELECT
                    pt.problem_id,
                    BIT_AND(t.public) as public
                FROM
                    Problems_Tags pt
                INNER JOIN
                    Problems pp
                ON
                    pp.problem_id = pt.problem_id
                INNER JOIN
                    Tags t
                ON
                    pt.tag_id = t.tag_id
                WHERE pt.tag_id IN (
                    SELECT t.tag_id
                    FROM Tags t
                    WHERE t.name in (?)
                )
                AND (pp.allow_user_add_tags = ? OR pt.source <> ?)
                GROUP BY
                    pt.problem_id
                HAVING (COUNT(pt.tag_id) = ?)
            ) ptp ON ptp.problem_id = p.problem_id
WHERE
FIND_IN_SET(?, p.languages) > ? AND FIND_IN_SET(?, p.languages) > ? AND (p.difficulty IS NULL OR (p.difficulty >= ? AND p.difficulty < ?.?)) AND (p.title LIKE CONCAT(?, ?, ?) OR p.alias LIKE CONCAT(?, ?, ?)) AND (p.visibility >= ? OR id.identity_id = ? OR ur.acl_id IS NOT NULL OR gr.acl_id IS NOT NULL) AND p.visibility > -? AND (ptp.public OR id.identity_id = ?) ORDER BY `submissions`  desc  LIMIT ?, ?
===========Clean query==================
 SELECT
                `r`.`run_id`,
                `s`.`guid`,
                `s`.`language`,
                `r`.`status`,
                `r`.`verdict`,
                `r`.`runtime`,
                `r`.`penalty`,
                `r`.`memory`,
                IF(
                    `c`.`score_mode` = ? AND `r`.`score` <> ?,
                        ?,
                        `r`.`score`
                ) AS `score`,
                IF(
                    `c`.`score_mode` = ? AND `r`.`score` <> ?,
                        ?,
                        `r`.`contest_score`
                ) AS `contest_score`,
                `s`.`time`,
                `s`.`submit_delay`,
                `s`.`type`,
                `i`.`username`,
                `p`.`alias`,
                IFNULL(`i`.`country_id`, ?) `country`,
                `c`.`alias` AS `contest_alias`,
                IFNULL(ur.classname, ?) `classname`,
                
        COALESCE(
        ( SELECT
            IF(
                verdict IN ("OLE", "OL"), "OUTPUT_EXCEEDED",
            IF(
                verdict IN ("WA", "PA"), "OUTPUT_INCORRECT",
            IF(
                verdict IN ("JE", "VE", "CE", "FO", "RFE", "RE", "RTE", "MLE", "TLE"), "OUTPUT_INTERRUPTED", "OUTPUT_CORRECT"
            )))
        AS output
        FROM
            Runs_Groups
        WHERE
            run_id = r.run_id
        GROUP BY
            output
        ORDER BY
            field(output, "OUTPUT_EXCEEDED", "OUTPUT_INCORRECT", "OUTPUT_INTERRUPTED", "OUTPUT_CORRECT")
        LIMIT ?
            ), "OUTPUT_INTERRUPTED") AS output,
            COALESCE(
        ( SELECT
            IF(
                verdict = "JE", "EXECUTION_JUDGE_ERROR",
            IF(
                verdict = "VE", "EXECUTION_VALIDATOR_ERROR",
            IF(
                verdict = "CE", "EXECUTION_COMPILATION_ERROR",
            IF(
                verdict IN ("OF", "RFE"), "EXECUTION_RUNTIME_FUNCTION_ERROR",
            IF(
                verdict IN ("RE", "RTE"), "EXECUTION_RUNTIME_ERROR",
            IF(
                verdict IN ("ML", "MLE", "TLE", "OLE", "TO", "OL"), "EXECUTION_INTERRUPTED", "EXECUTION_FINISHED")
            )))))
            AS execution
        FROM
            Runs_Groups
        WHERE
            run_id = r.run_id
        GROUP BY
            execution
        ORDER BY
            field(
                execution,
                "EXECUTION_JUDGE_ERROR",
                "EXECUTION_VALIDATOR_ERROR",
                "EXECUTION_COMPILATION_ERROR",
                "EXECUTION_RUNTIME_FUNCTION_ERROR",
                "EXECUTION_RUNTIME_ERROR",
                "EXECUTION_INTERRUPTED",
                "EXECUTION_FINISHED"
            )
        LIMIT ?
            ), "EXECUTION_COMPILATION_ERROR")AS execution,
            COALESCE(
        ( SELECT
            IF(
                verdict IN ("JE", "CE"), "RUNTIME_NOT_AVAILABLE",
            IF(
                verdict IN ("TLE", "TO"), "RUNTIME_EXCEEDED", "RUNTIME_AVAILABLE"
            ))
            AS status_runtime
        FROM
            Runs_Groups
        WHERE
            run_id = r.run_id
        ORDER BY
            field(status_runtime, "RUNTIME_NOT_AVAILABLE", "RUNTIME_EXCEEDED", "RUNTIME_AVAILABLE")
                LIMIT ?
            ), "RUNTIME_NOT_AVAILABLE" )AS status_runtime,
            COALESCE(
        ( SELECT
            IF(
                verdict IN ("JE", "CE"), "MEMORY_NOT_AVAILABLE",
            IF(
                verdict IN ("ML", "MLE"), "MEMORY_EXCEEDED", "MEMORY_AVAILABLE"
            ))
        AS status_memory
        FROM
            Runs_Groups
        WHERE
            run_id = r.run_id
        ORDER BY
            field(status_memory, "MEMORY_NOT_AVAILABLE", "MEMORY_EXCEEDED", "MEMORY_AVAILABLE")
        LIMIT ?
            ), "MEMORY_NOT_AVAILABLE" )AS status_memory,
                ? AS suggestions
            FROM
                Submissions s
            
            INNER JOIN
                Runs r ON r.run_id = s.current_run_id
            INNER JOIN
                Problems p ON p.problem_id = s.problem_id
            INNER JOIN
                Identities i ON i.identity_id = s.identity_id
            LEFT JOIN
                User_Rank ur ON ur.user_id = i.user_id
            LEFT JOIN
                Contests c ON c.problemset_id = s.problemset_id
        WHERE s.verdict <> ?
            ORDER BY s.submission_id DESC
            LIMIT ?, ?
===========Clean query==================
 SELECT
                COUNT(*)
         
            FROM
                Problems AS p
        
                WHERE
                    p.`title` LIKE CONCAT("%", ?, "%") OR
                    p.`alias` LIKE CONCAT("%", ?, "%")
===========Clean query==================
 SELECT
  DISTINCT `a`.`owner_id` AS `user_id`
FROM
  `Contests` AS `c`
INNER JOIN
  `ACLs` AS `a` ON `c`.`acl_id` = `a`.`acl_id`
WHERE
  `c`.`rerun_id` IS NULL
===========Clean query==================
 SELECT
                cl.clarification_id,
                ps.assignment_alias AS assignment_alias,
                p.alias AS problem_alias,
                i.username AS author,
                r.username AS receiver,
                cl.message,
                cl.answer,
                cl.`time`,
                cl.public
        
            FROM
                (
            SELECT
                problemset_id,
                alias AS assignment_alias
            FROM
                Assignments
            WHERE
                course_id = ?
            ) ps
            INNER JOIN
                Clarifications cl ON cl.problemset_id = ps.problemset_id
            INNER JOIN
                Identities i ON i.identity_id = cl.author_id
            LEFT JOIN
                Identities r ON r.identity_id = cl.receiver_id
            INNER JOIN
                Problems p ON p.problem_id = cl.problem_id
            
            ORDER BY
                cl.answer IS NULL DESC,
                cl.clarification_id DESC
===========Clean query==================
 SELECT
                    `Problems`.`problem_id`, `Problems`.`acl_id`, `Problems`.`visibility`, `Problems`.`title`, `Problems`.`alias`, `Problems`.`commit`, `Problems`.`current_version`, `Problems`.`languages`, `Problems`.`input_limit`, `Problems`.`visits`, `Problems`.`submissions`, `Problems`.`accepted`, `Problems`.`difficulty`, `Problems`.`creation_date`, `Problems`.`source`, `Problems`.`order`, `Problems`.`deprecated`, `Problems`.`email_clarifications`, `Problems`.`quality`, `Problems`.`quality_histogram`, `Problems`.`difficulty_histogram`, `Problems`.`quality_seal`, `Problems`.`show_diff`, `Problems`.`allow_user_add_tags`
                FROM
                    Problems
                WHERE
                    title = ?
===========Clean query==================
 SELECT
                      u.user_id, u.facebook_user_id, u.git_token, u.main_email_id, u.main_identity_id, u.has_learning_objective, u.has_teaching_objective, u.has_scholar_objective, u.has_competitive_objective, u.scholar_degree, u.birth_date, u.verified, u.verification_id, u.deletion_token, u.reset_digest, u.reset_sent_at, u.hide_problem_tags, u.in_mailing_list, u.is_private, u.preferred_language, u.parent_verified, u.creation_timestamp, u.parental_verification_token, u.parent_email_verification_initial, u.parent_email_verification_deadline, u.parent_email_id

                    FROM
                        Users u
                    INNER JOIN
                        Identities i ON u.main_identity_id = i.identity_id
                    WHERE
                      parental_verification_token = ?
                    LIMIT ?
                    FOR UPDATE
===========Clean query==================
 SELECT
                        alias, title, ?.? AS relevance
             FROM
                        Problems p
                    WHERE
                        p.title = ?    LIMIT ?, ?
===========Clean query==================
 SELECT
                `r`.`run_id`,
                `s`.`guid`,
                `s`.`language`,
                `r`.`status`,
                `r`.`verdict`,
                `r`.`runtime`,
                `r`.`penalty`,
                `r`.`memory`,
                IF(
                    `c`.`score_mode` = ? AND `r`.`score` <> ?,
                        ?,
                        `r`.`score`
                ) AS `score`,
                IF(
                    `c`.`score_mode` = ? AND `r`.`score` <> ?,
                        ?,
                        `r`.`contest_score`
                ) AS `contest_score`,
                `s`.`time`,
                `s`.`submit_delay`,
                `s`.`type`,
                `i`.`username`,
                `p`.`alias`,
                IFNULL(`i`.`country_id`, ?) `country`,
                `c`.`alias` AS `contest_alias`,
                IFNULL(ur.classname, ?) `classname`,
                
        COALESCE(
        ( SELECT
            IF(
                verdict IN ("OLE", "OL"), "OUTPUT_EXCEEDED",
            IF(
                verdict IN ("WA", "PA"), "OUTPUT_INCORRECT",
            IF(
                verdict IN ("JE", "VE", "CE", "FO", "RFE", "RE", "RTE", "MLE", "TLE"), "OUTPUT_INTERRUPTED", "OUTPUT_CORRECT"
            )))
        AS output
        FROM
            Runs_Groups
        WHERE
            run_id = r.run_id
        GROUP BY
            output
        ORDER BY
            field(output, "OUTPUT_EXCEEDED", "OUTPUT_INCORRECT", "OUTPUT_INTERRUPTED", "OUTPUT_CORRECT")
        LIMIT ?
            ), "OUTPUT_INTERRUPTED") AS output,
            COALESCE(
        ( SELECT
            IF(
                verdict = "JE", "EXECUTION_JUDGE_ERROR",
            IF(
                verdict = "VE", "EXECUTION_VALIDATOR_ERROR",
            IF(
                verdict = "CE", "EXECUTION_COMPILATION_ERROR",
            IF(
                verdict IN ("OF", "RFE"), "EXECUTION_RUNTIME_FUNCTION_ERROR",
            IF(
                verdict IN ("RE", "RTE"), "EXECUTION_RUNTIME_ERROR",
            IF(
                verdict IN ("ML", "MLE", "TLE", "OLE", "TO", "OL"), "EXECUTION_INTERRUPTED", "EXECUTION_FINISHED")
            )))))
            AS execution
        FROM
            Runs_Groups
        WHERE
            run_id = r.run_id
        GROUP BY
            execution
        ORDER BY
            field(
                execution,
                "EXECUTION_JUDGE_ERROR",
                "EXECUTION_VALIDATOR_ERROR",
                "EXECUTION_COMPILATION_ERROR",
                "EXECUTION_RUNTIME_FUNCTION_ERROR",
                "EXECUTION_RUNTIME_ERROR",
                "EXECUTION_INTERRUPTED",
                "EXECUTION_FINISHED"
            )
        LIMIT ?
            ), "EXECUTION_COMPILATION_ERROR")AS execution,
            COALESCE(
        ( SELECT
            IF(
                verdict IN ("JE", "CE"), "RUNTIME_NOT_AVAILABLE",
            IF(
                verdict IN ("TLE", "TO"), "RUNTIME_EXCEEDED", "RUNTIME_AVAILABLE"
            ))
            AS status_runtime
        FROM
            Runs_Groups
        WHERE
            run_id = r.run_id
        ORDER BY
            field(status_runtime, "RUNTIME_NOT_AVAILABLE", "RUNTIME_EXCEEDED", "RUNTIME_AVAILABLE")
                LIMIT ?
            ), "RUNTIME_NOT_AVAILABLE" )AS status_runtime,
            COALESCE(
        ( SELECT
            IF(
                verdict IN ("JE", "CE"), "MEMORY_NOT_AVAILABLE",
            IF(
                verdict IN ("ML", "MLE"), "MEMORY_EXCEEDED", "MEMORY_AVAILABLE"
            ))
        AS status_memory
        FROM
            Runs_Groups
        WHERE
            run_id = r.run_id
        ORDER BY
            field(status_memory, "MEMORY_NOT_AVAILABLE", "MEMORY_EXCEEDED", "MEMORY_AVAILABLE")
        LIMIT ?
            ), "MEMORY_NOT_AVAILABLE" )AS status_memory,
                ? AS suggestions
            FROM
                Submissions s
            
            INNER JOIN
                Runs r ON r.run_id = s.current_run_id
            INNER JOIN
                Problems p ON p.problem_id = s.problem_id
            INNER JOIN
                Identities i ON i.identity_id = s.identity_id
            LEFT JOIN
                User_Rank ur ON ur.user_id = i.user_id
            LEFT JOIN
                Contests c ON c.problemset_id = s.problemset_id
        
            ORDER BY s.submission_id DESC
            LIMIT ?, ?
===========Clean query==================
 SELECT COUNT(*) 
                FROM
                    Problems p
                LEFT JOIN (
                    SELECT
                        Submissions.problem_id,
                        MAX(Runs.score) AS score
                    FROM
                        Submissions
                    INNER JOIN
                        Runs ON Runs.run_id = Submissions.current_run_id
                    WHERE
                        Submissions.identity_id = ?
                    GROUP BY
                        Submissions.problem_id
                    ) ps ON ps.problem_id = p.problem_id 
WHERE
(p.title LIKE CONCAT(?, ?, ?) OR p.alias LIKE CONCAT(?, ?, ?)) AND p.visibility > -?
===========Clean query==================
 SELECT
                    `g`.`name` AS `label`,
                    `g`.`alias` AS `value`
                FROM
                    `Groups_` `g`
                WHERE
                    `g`.`name` LIKE CONCAT(?, ?, ?)
                    OR `g`.`alias` LIKE CONCAT(?, ?, ?)
                LIMIT
                    ?
===========Clean query==================
 SELECT
                `Notifications`.`notification_id`,
                `Notifications`.`user_id`,
                `Notifications`.`timestamp`,
                `Notifications`.`read`,
                `Notifications`.`contents`
            FROM
                `Notifications`
===========Clean query==================
 SELECT contest_id, problemset_id, acl_id, title, description, start_time, finish_time, last_updated, window_length, rerun_id, admission_mode, alias, scoreboard, points_decay_factor, partial_score, submissions_gap, feedback, penalty, penalty_type, penalty_calc_policy, show_scoreboard_after, urgent, languages, recommended, archived, certificate_cutoff, certificates_status, contest_for_teams, default_show_all_contestants_in_scoreboard, score_mode, plagiarism_threshold, check_plagiarism FROM Contests WHERE title = ? and archived = ?
===========Clean query==================
 SELECT DISTINCT
                    ROUND(? / LOG2(GREATEST(p.accepted, ?) + ?), ?) AS points,
                    p.accepted / GREATEST(?, p.submissions)     AS ratio,
                    ROUND(? * IFNULL(ps.score, ?), ?)   AS score,
                    `p`.`problem_id`, `p`.`acl_id`, `p`.`visibility`, `p`.`title`, `p`.`alias`, `p`.`commit`, `p`.`current_version`, `p`.`languages`, `p`.`input_limit`, `p`.`visits`, `p`.`submissions`, `p`.`accepted`, `p`.`difficulty`, `p`.`creation_date`, `p`.`source`, `p`.`order`, `p`.`deprecated`, `p`.`email_clarifications`, `p`.`quality`, `p`.`quality_histogram`, `p`.`difficulty_histogram`, `p`.`quality_seal`, `p`.`show_diff`, `p`.`allow_user_add_tags`
             
                FROM
                    Problems p
                INNER JOIN
                    ACLs a
                ON
                    a.acl_id = p.acl_id
                LEFT JOIN (
                    SELECT
                        s.problem_id,
                        s.identity_id,
                        MAX(r.score) AS score
                    FROM
                        Submissions s
                    INNER JOIN
                        Runs r ON r.run_id = s.current_run_id
                    WHERE
                        s.identity_id = ?
                    GROUP BY
                        s.problem_id, s.identity_id
                ) ps ON ps.problem_id = p.problem_id
                LEFT JOIN
                    User_Roles ur ON ur.user_id = ? AND p.acl_id = ur.acl_id AND ur.role_id = ?
                LEFT JOIN
                    Identities id ON id.identity_id = ? AND a.owner_id = id.user_id
                LEFT JOIN (
                    SELECT DISTINCT
                        gr.acl_id
                    FROM
                        Groups_Identities gi
                    INNER JOIN
                        Group_Roles gr ON gr.group_id = gi.group_id
                    WHERE gi.identity_id = ? AND gr.role_id = ?
                ) gr ON p.acl_id = gr.acl_id 
WHERE
(p.title LIKE CONCAT(?, ?, ?) OR p.alias LIKE CONCAT(?, ?, ?)) AND (p.visibility >= ? OR id.identity_id = ? OR ur.acl_id IS NOT NULL OR gr.acl_id IS NOT NULL) AND p.visibility > -? ORDER BY `points` DESC, `accepted` ASC, `submissions` DESC  LIMIT ?, ?
===========Clean query==================
 SELECT
  `activity`.`user_id`
FROM
  (
    (
      SELECT DISTINCT
        `a`.`owner_id` AS `user_id`,
        YEAR(`c`.`last_updated`) AS `year`
      FROM
        `Contests` AS `c`
      INNER JOIN
        `ACLs` AS `a` ON `a`.`acl_id` = `c`.`acl_id`
    )
    UNION DISTINCT
    (
      SELECT DISTINCT
        `a`.`owner_id` AS `user_id`,
        YEAR(`p`.`creation_date`) AS `year`
      FROM
        `Problems` AS `p`
      INNER JOIN
        `ACLs` AS `a` ON `p`.`acl_id` = `a`.`acl_id`
    )
    UNION DISTINCT
    (
      SELECT DISTINCT
        `u`.`user_id`,
        YEAR(`s`.`time`) AS `year`
      FROM
        `Submissions` AS `s`
      INNER JOIN
        `Users` AS `u` ON `s`.`identity_id` = `u`.`main_identity_id`
      INNER JOIN
        `Runs` AS `r` ON `r`.`run_id` = `s`.`current_run_id`
      WHERE
        `r`.`verdict` = ?
    )
  ) AS `activity`
WHERE
  `activity`.`year` >= YEAR(NOW()) - ?
GROUP BY
  `activity`.`user_id`
HAVING
  COUNT(`activity`.`year`) = ?
===========Clean query==================
 SELECT
                COUNT(?)
        
            FROM
                `User_Rank` `ur`
            WHERE
                `ur`.`author_score` IS NOT NULL AND
                `ur`.`author_ranking` IS NOT NULL AND
                (
                    SELECT
                        COUNT(*)
                    FROM
                        `Problems` `p`
                    INNER JOIN
                        `ACLs` `acl` ON `p`.`acl_id` = `acl`.`acl_id`
                    INNER JOIN
                        `Users` `u` ON `u`.`user_id` = `acl`.`owner_id`
                    WHERE
                    `u`.`user_id` = `ur`.`user_id` AND `p`.`quality_seal` = ?
                ) > ?
===========Clean query==================
 SELECT DISTINCT
                    ROUND(? / LOG2(GREATEST(p.accepted, ?) + ?), ?) AS points,
                    p.accepted / GREATEST(?, p.submissions)     AS ratio,
                    ROUND(? * IFNULL(ps.score, ?), ?)   AS score,
                    `p`.`problem_id`, `p`.`acl_id`, `p`.`visibility`, `p`.`title`, `p`.`alias`, `p`.`commit`, `p`.`current_version`, `p`.`languages`, `p`.`input_limit`, `p`.`visits`, `p`.`submissions`, `p`.`accepted`, `p`.`difficulty`, `p`.`creation_date`, `p`.`source`, `p`.`order`, `p`.`deprecated`, `p`.`email_clarifications`, `p`.`quality`, `p`.`quality_histogram`, `p`.`difficulty_histogram`, `p`.`quality_seal`, `p`.`show_diff`, `p`.`allow_user_add_tags`
             
                FROM
                    Problems p
                INNER JOIN
                    ACLs a
                ON
                    a.acl_id = p.acl_id
                LEFT JOIN (
                    SELECT
                        s.problem_id,
                        s.identity_id,
                        MAX(r.score) AS score
                    FROM
                        Submissions s
                    INNER JOIN
                        Runs r ON r.run_id = s.current_run_id
                    WHERE
                        s.identity_id = ?
                    GROUP BY
                        s.problem_id, s.identity_id
                ) ps ON ps.problem_id = p.problem_id
                LEFT JOIN
                    User_Roles ur ON ur.user_id = ? AND p.acl_id = ur.acl_id AND ur.role_id = ?
                LEFT JOIN
                    Identities id ON id.identity_id = ? AND a.owner_id = id.user_id
                LEFT JOIN (
                    SELECT DISTINCT
                        gr.acl_id
                    FROM
                        Groups_Identities gi
                    INNER JOIN
                        Group_Roles gr ON gr.group_id = gi.group_id
                    WHERE gi.identity_id = ? AND gr.role_id = ?
                ) gr ON p.acl_id = gr.acl_id 
            INNER JOIN (
                SELECT
                    pt.problem_id,
                    BIT_AND(t.public) as public
                FROM
                    Problems_Tags pt
                INNER JOIN
                    Problems pp
                ON
                    pp.problem_id = pt.problem_id
                INNER JOIN
                    Tags t
                ON
                    pt.tag_id = t.tag_id
                WHERE pt.tag_id IN (
                    SELECT t.tag_id
                    FROM Tags t
                    WHERE t.name in (?,?)
                )
                AND (pp.allow_user_add_tags = ? OR pt.source <> ?)
                GROUP BY
                    pt.problem_id
                
            ) ptp ON ptp.problem_id = p.problem_id
WHERE
(p.difficulty IS NULL OR (p.difficulty >= ? AND p.difficulty <= ?)) AND (p.title LIKE CONCAT(?, ?, ?) OR p.alias LIKE CONCAT(?, ?, ?)) AND (p.visibility >= ? OR id.identity_id = ? OR ur.acl_id IS NOT NULL OR gr.acl_id IS NOT NULL) AND p.visibility > -? AND (ptp.public OR id.identity_id = ?) ORDER BY `quality`  desc  LIMIT ?, ?
===========Clean query==================
 SELECT
                s.school_id,
                s.name,
                s.`ranking`,
                s.score,
                s.country_id
            FROM
                Schools s
            WHERE
                s.score != ?
            ORDER BY
                s.`ranking` IS NULL, s.`ranking` ASC
         LIMIT ?, ?
===========Clean query==================
 SELECT COUNT(*) 
                    FROM
                        Problems p 
WHERE
(p.title LIKE CONCAT(?, ?, ?) OR p.alias LIKE CONCAT(?, ?, ?)) AND p.visibility >= ?
===========Clean query==================
 SELECT
                    user_id, facebook_user_id, git_token, main_email_id, main_identity_id, has_learning_objective, has_teaching_objective, has_scholar_objective, has_competitive_objective, scholar_degree, birth_date, verified, verification_id, deletion_token, reset_digest, reset_sent_at, hide_problem_tags, in_mailing_list, is_private, preferred_language, parent_verified, creation_timestamp, parental_verification_token, parent_email_verification_initial, parent_email_verification_deadline, parent_email_id
                FROM
                    Users u
                WHERE
                    verified = ?
                AND
                    in_mailing_list = ?
===========Clean query==================
 SELECT
    DISTINCT `u`.`user_id`
FROM
    `Problems` AS `p`
INNER JOIN
    `Submissions` AS `s` ON `p`.`problem_id` = `s`.`problem_id`
INNER JOIN
    `Runs` AS `r` ON `r`.`run_id` = `s`.`current_run_id`
INNER JOIN
    `Identities` AS `i` ON `s`.`identity_id` = `i`.`identity_id`
INNER JOIN
    `Users` AS `u` ON `u`.`main_identity_id` = `i`.`identity_id`
WHERE
    `r`.`verdict` = "AC" AND
    `s`.`type` = "normal" AND
    `p`.`visibility` >= ? AND
    FIND_IN_SET(`s`.`language`,?)
GROUP BY
    `u`.`user_id`
HAVING
    COUNT(DISTINCT `p`.`problem_id`) > ?
===========Clean query==================
 SELECT
                    `tg`.`team_group_id`, `tg`.`acl_id`, `tg`.`create_time`, `tg`.`alias`, `tg`.`name`, `tg`.`description`, `tg`.`number_of_contestants`
                FROM
                    `Team_Groups` `tg`
                WHERE
                    `tg`.`name` = ?
                LIMIT ?
===========Clean query==================
 SELECT DISTINCT
                    ROUND(? / LOG2(GREATEST(p.accepted, ?) + ?), ?) AS points,
                    p.accepted / GREATEST(?, p.submissions)     AS ratio,
                    ROUND(? * IFNULL(ps.score, ?), ?)   AS score,
                    `p`.`problem_id`, `p`.`acl_id`, `p`.`visibility`, `p`.`title`, `p`.`alias`, `p`.`commit`, `p`.`current_version`, `p`.`languages`, `p`.`input_limit`, `p`.`visits`, `p`.`submissions`, `p`.`accepted`, `p`.`difficulty`, `p`.`creation_date`, `p`.`source`, `p`.`order`, `p`.`deprecated`, `p`.`email_clarifications`, `p`.`quality`, `p`.`quality_histogram`, `p`.`difficulty_histogram`, `p`.`quality_seal`, `p`.`show_diff`, `p`.`allow_user_add_tags`
             
                FROM
                    Problems p
                INNER JOIN
                    ACLs a
                ON
                    a.acl_id = p.acl_id
                LEFT JOIN (
                    SELECT
                        s.problem_id,
                        s.identity_id,
                        MAX(r.score) AS score
                    FROM
                        Submissions s
                    INNER JOIN
                        Runs r ON r.run_id = s.current_run_id
                    WHERE
                        s.identity_id = ?
                    GROUP BY
                        s.problem_id, s.identity_id
                ) ps ON ps.problem_id = p.problem_id
                LEFT JOIN
                    User_Roles ur ON ur.user_id = ? AND p.acl_id = ur.acl_id AND ur.role_id = ?
                LEFT JOIN
                    Identities id ON id.identity_id = ? AND a.owner_id = id.user_id
                LEFT JOIN (
                    SELECT DISTINCT
                        gr.acl_id
                    FROM
                        Groups_Identities gi
                    INNER JOIN
                        Group_Roles gr ON gr.group_id = gi.group_id
                    WHERE gi.identity_id = ? AND gr.role_id = ?
                ) gr ON p.acl_id = gr.acl_id 
            INNER JOIN (
                SELECT
                    pt.problem_id,
                    BIT_AND(t.public) as public
                FROM
                    Problems_Tags pt
                INNER JOIN
                    Problems pp
                ON
                    pp.problem_id = pt.problem_id
                INNER JOIN
                    Tags t
                ON
                    pt.tag_id = t.tag_id
                WHERE pt.tag_id IN (
                    SELECT t.tag_id
                    FROM Tags t
                    WHERE t.name in (?,?)
                )
                AND (pp.allow_user_add_tags = ? OR pt.source <> ?)
                GROUP BY
                    pt.problem_id
                
            ) ptp ON ptp.problem_id = p.problem_id
WHERE
p.difficulty >= ?.? AND p.difficulty <= ? AND (p.title LIKE CONCAT(?, ?, ?) OR p.alias LIKE CONCAT(?, ?, ?)) AND (p.visibility >= ? OR id.identity_id = ? OR ur.acl_id IS NOT NULL OR gr.acl_id IS NOT NULL) AND p.visibility > -? AND (ptp.public OR id.identity_id = ?) ORDER BY `quality`  desc  LIMIT ?, ?
===========Clean query==================
 SELECT
    DISTINCT `u`.`user_id`
FROM
    `Problems` AS `p`
INNER JOIN
    `Submissions` AS `s` ON `p`.`problem_id` = `s`.`problem_id`
INNER JOIN
    `Runs` AS `r` ON `r`.`run_id` = `s`.`current_run_id`
INNER JOIN
    `Identities` AS `i` ON `s`.`identity_id` = `i`.`identity_id`
INNER JOIN
    `Users` AS `u` ON `u`.`main_identity_id` = `i`.`identity_id`
WHERE
    `r`.`verdict` = "AC" AND
    `s`.`type` = "normal" AND
    `p`.`visibility` >= ? AND
    `s`.`language` REGEXP ?
GROUP BY
    `u`.`user_id`
HAVING
    COUNT(DISTINCT `p`.`problem_id`) > ?
===========Clean query==================
 SELECT
                COUNT(c.course_id)
            FROM
                Courses c
            WHERE
                c.start_time BETWEEN FROM_UNIXTIME(?) AND FROM_UNIXTIME(?)
===========Clean query==================
 SELECT COUNT(*) 
                FROM
                    Problems p
                INNER JOIN
                    ACLs a
                ON
                    a.acl_id = p.acl_id
                LEFT JOIN (
                    SELECT
                        s.problem_id,
                        s.identity_id,
                        MAX(r.score) AS score
                    FROM
                        Submissions s
                    INNER JOIN
                        Runs r ON r.run_id = s.current_run_id
                    WHERE
                        s.identity_id = ?
                    GROUP BY
                        s.problem_id, s.identity_id
                ) ps ON ps.problem_id = p.problem_id
                LEFT JOIN
                    User_Roles ur ON ur.user_id = ? AND p.acl_id = ur.acl_id AND ur.role_id = ?
                LEFT JOIN
                    Identities id ON id.identity_id = ? AND a.owner_id = id.user_id
                LEFT JOIN (
                    SELECT DISTINCT
                        gr.acl_id
                    FROM
                        Groups_Identities gi
                    INNER JOIN
                        Group_Roles gr ON gr.group_id = gi.group_id
                    WHERE gi.identity_id = ? AND gr.role_id = ?
                ) gr ON p.acl_id = gr.acl_id 
            INNER JOIN (
                SELECT
                    pt.problem_id,
                    BIT_AND(t.public) as public
                FROM
                    Problems_Tags pt
                INNER JOIN
                    Problems pp
                ON
                    pp.problem_id = pt.problem_id
                INNER JOIN
                    Tags t
                ON
                    pt.tag_id = t.tag_id
                WHERE pt.tag_id IN (
                    SELECT t.tag_id
                    FROM Tags t
                    WHERE t.name in (?)
                )
                AND (pp.allow_user_add_tags = ? OR pt.source <> ?)
                GROUP BY
                    pt.problem_id
                HAVING (COUNT(pt.tag_id) = ?)
            ) ptp ON ptp.problem_id = p.problem_id
WHERE
FIND_IN_SET(?, p.languages) > ? AND FIND_IN_SET(?, p.languages) > ? AND (p.difficulty IS NULL OR (p.difficulty >= ? AND p.difficulty < ?.?)) AND (p.title LIKE CONCAT(?, ?, ?) OR p.alias LIKE CONCAT(?, ?, ?)) AND (p.visibility >= ? OR id.identity_id = ? OR ur.acl_id IS NOT NULL OR gr.acl_id IS NOT NULL) AND p.visibility > -? AND (ptp.public OR id.identity_id = ?)
===========Clean query==================
 SELECT DISTINCT
                    ROUND(? / LOG2(GREATEST(p.accepted, ?) + ?), ?) AS points,
                    p.accepted / GREATEST(?, p.submissions)     AS ratio,
                    ROUND(? * IFNULL(ps.score, ?), ?)   AS score,
                    `p`.`problem_id`, `p`.`acl_id`, `p`.`visibility`, `p`.`title`, `p`.`alias`, `p`.`commit`, `p`.`current_version`, `p`.`languages`, `p`.`input_limit`, `p`.`visits`, `p`.`submissions`, `p`.`accepted`, `p`.`difficulty`, `p`.`creation_date`, `p`.`source`, `p`.`order`, `p`.`deprecated`, `p`.`email_clarifications`, `p`.`quality`, `p`.`quality_histogram`, `p`.`difficulty_histogram`, `p`.`quality_seal`, `p`.`show_diff`, `p`.`allow_user_add_tags`
             
                FROM
                    Problems p
                INNER JOIN
                    ACLs a
                ON
                    a.acl_id = p.acl_id
                LEFT JOIN (
                    SELECT
                        s.problem_id,
                        s.identity_id,
                        MAX(r.score) AS score
                    FROM
                        Submissions s
                    INNER JOIN
                        Runs r ON r.run_id = s.current_run_id
                    WHERE
                        s.identity_id = ?
                    GROUP BY
                        s.problem_id, s.identity_id
                ) ps ON ps.problem_id = p.problem_id
                LEFT JOIN
                    User_Roles ur ON ur.user_id = ? AND p.acl_id = ur.acl_id AND ur.role_id = ?
                LEFT JOIN
                    Identities id ON id.identity_id = ? AND a.owner_id = id.user_id
                LEFT JOIN (
                    SELECT DISTINCT
                        gr.acl_id
                    FROM
                        Groups_Identities gi
                    INNER JOIN
                        Group_Roles gr ON gr.group_id = gi.group_id
                    WHERE gi.identity_id = ? AND gr.role_id = ?
                ) gr ON p.acl_id = gr.acl_id 
WHERE
(p.title LIKE CONCAT(?, ?, ?) OR p.alias LIKE CONCAT(?, ?, ?)) AND (p.visibility >= ? OR id.identity_id = ? OR ur.acl_id IS NOT NULL OR gr.acl_id IS NOT NULL) AND p.visibility > -? ORDER BY `title` COLLATE utf8mb4_bin desc  LIMIT ?, ?
===========Clean query==================
 SELECT DISTINCT
                    ROUND(? / LOG2(GREATEST(p.accepted, ?) + ?), ?) AS points,
                    p.accepted / GREATEST(?, p.submissions)     AS ratio,
                    ROUND(? * IFNULL(ps.score, ?), ?)   AS score,
                    `p`.`problem_id`, `p`.`acl_id`, `p`.`visibility`, `p`.`title`, `p`.`alias`, `p`.`commit`, `p`.`current_version`, `p`.`languages`, `p`.`input_limit`, `p`.`visits`, `p`.`submissions`, `p`.`accepted`, `p`.`difficulty`, `p`.`creation_date`, `p`.`source`, `p`.`order`, `p`.`deprecated`, `p`.`email_clarifications`, `p`.`quality`, `p`.`quality_histogram`, `p`.`difficulty_histogram`, `p`.`quality_seal`, `p`.`show_diff`, `p`.`allow_user_add_tags`
             
                FROM
                    Problems p
                INNER JOIN
                    ACLs a
                ON
                    a.acl_id = p.acl_id
                LEFT JOIN (
                    SELECT
                        s.problem_id,
                        s.identity_id,
                        MAX(r.score) AS score
                    FROM
                        Submissions s
                    INNER JOIN
                        Runs r ON r.run_id = s.current_run_id
                    WHERE
                        s.identity_id = ?
                    GROUP BY
                        s.problem_id, s.identity_id
                ) ps ON ps.problem_id = p.problem_id
                LEFT JOIN
                    User_Roles ur ON ur.user_id = ? AND p.acl_id = ur.acl_id AND ur.role_id = ?
                LEFT JOIN
                    Identities id ON id.identity_id = ? AND a.owner_id = id.user_id
                LEFT JOIN (
                    SELECT DISTINCT
                        gr.acl_id
                    FROM
                        Groups_Identities gi
                    INNER JOIN
                        Group_Roles gr ON gr.group_id = gi.group_id
                    WHERE gi.identity_id = ? AND gr.role_id = ?
                ) gr ON p.acl_id = gr.acl_id 
WHERE
(p.title LIKE CONCAT(?, ?, ?) OR p.alias LIKE CONCAT(?, ?, ?)) AND (p.visibility >= ? OR id.identity_id = ? OR ur.acl_id IS NOT NULL OR gr.acl_id IS NOT NULL) AND p.visibility > -? ORDER BY `ratio`  asc  LIMIT ?, ?
===========Clean query==================
 SELECT DISTINCT
                    ROUND(? / LOG2(GREATEST(p.accepted, ?) + ?), ?) AS points,
                    p.accepted / GREATEST(?, p.submissions)     AS ratio,
                    ROUND(? * IFNULL(ps.score, ?), ?)   AS score,
                    `p`.`problem_id`, `p`.`acl_id`, `p`.`visibility`, `p`.`title`, `p`.`alias`, `p`.`commit`, `p`.`current_version`, `p`.`languages`, `p`.`input_limit`, `p`.`visits`, `p`.`submissions`, `p`.`accepted`, `p`.`difficulty`, `p`.`creation_date`, `p`.`source`, `p`.`order`, `p`.`deprecated`, `p`.`email_clarifications`, `p`.`quality`, `p`.`quality_histogram`, `p`.`difficulty_histogram`, `p`.`quality_seal`, `p`.`show_diff`, `p`.`allow_user_add_tags`
             
                FROM
                    Problems p
                INNER JOIN
                    ACLs a
                ON
                    a.acl_id = p.acl_id
                LEFT JOIN (
                    SELECT
                        s.problem_id,
                        s.identity_id,
                        MAX(r.score) AS score
                    FROM
                        Submissions s
                    INNER JOIN
                        Runs r ON r.run_id = s.current_run_id
                    WHERE
                        s.identity_id = ?
                    GROUP BY
                        s.problem_id, s.identity_id
                ) ps ON ps.problem_id = p.problem_id
                LEFT JOIN
                    User_Roles ur ON ur.user_id = ? AND p.acl_id = ur.acl_id AND ur.role_id = ?
                LEFT JOIN
                    Identities id ON id.identity_id = ? AND a.owner_id = id.user_id
                LEFT JOIN (
                    SELECT DISTINCT
                        gr.acl_id
                    FROM
                        Groups_Identities gi
                    INNER JOIN
                        Group_Roles gr ON gr.group_id = gi.group_id
                    WHERE gi.identity_id = ? AND gr.role_id = ?
                ) gr ON p.acl_id = gr.acl_id 
WHERE
(p.title LIKE CONCAT(?, ?, ?) OR p.alias LIKE CONCAT(?, ?, ?)) AND (p.visibility >= ? OR id.identity_id = ? OR ur.acl_id IS NOT NULL OR gr.acl_id IS NOT NULL) AND p.visibility > -? ORDER BY p.difficulty IS NULL, p.difficulty ASC LIMIT ?, ?
===========Clean query==================
 SELECT `g`.`group_id`, `g`.`acl_id`, `g`.`create_time`, `g`.`alias`, `g`.`name`, `g`.`description` FROM `Groups_` `g` WHERE `g`.`name` LIKE CONCAT(?, ?, ?) LIMIT ?
===========Clean query==================
 SELECT DISTINCT
                    tg.alias AS `key`,
                    tg.name AS `value`
                FROM
                    Team_Groups tg
                WHERE
                    tg.alias LIKE CONCAT(?, ?, ?) OR
                    tg.name LIKE CONCAT(?, ?, ?)
                LIMIT ?
===========Clean query==================
 SELECT COUNT(*) 
                FROM
                    Problems p
                INNER JOIN
                    ACLs a
                ON
                    a.acl_id = p.acl_id
                LEFT JOIN (
                    SELECT
                        s.problem_id,
                        s.identity_id,
                        MAX(r.score) AS score
                    FROM
                        Submissions s
                    INNER JOIN
                        Runs r ON r.run_id = s.current_run_id
                    WHERE
                        s.identity_id = ?
                    GROUP BY
                        s.problem_id, s.identity_id
                ) ps ON ps.problem_id = p.problem_id
                LEFT JOIN
                    User_Roles ur ON ur.user_id = ? AND p.acl_id = ur.acl_id AND ur.role_id = ?
                LEFT JOIN
                    Identities id ON id.identity_id = ? AND a.owner_id = id.user_id
                LEFT JOIN (
                    SELECT DISTINCT
                        gr.acl_id
                    FROM
                        Groups_Identities gi
                    INNER JOIN
                        Group_Roles gr ON gr.group_id = gi.group_id
                    WHERE gi.identity_id = ? AND gr.role_id = ?
                ) gr ON p.acl_id = gr.acl_id 
WHERE
(p.title LIKE CONCAT(?, ?, ?) OR p.alias LIKE CONCAT(?, ?, ?)) AND (p.visibility >= ? OR id.identity_id = ? OR ur.acl_id IS NOT NULL OR gr.acl_id IS NOT NULL) AND p.visibility > -?
===========Clean query==================
 SELECT
                        COUNT(*)
                     
            FROM
                Contests
            INNER JOIN
                ACLs a ON a.acl_id = Contests.acl_id
            INNER JOIN
                Users u ON u.user_id = a.owner_id
            INNER JOIN
                Problemsets p ON p.problemset_id = Contests.problemset_id
            WHERE
                u.main_identity_id = ?
                AND archived = ?
80
=========================== short test summary info ============================
FAILED stuff/test_mysql_logs.py::test_main - assert False
======================== 1 failed in 107.08s (0:01:47) =========================
